<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_417679_bl_analtx.BacklogAnalytics</api_name>
        <caller_access>1</caller_access>
        <client_callable>false</client_callable>
        <description/>
        <name>BacklogAnalytics</name>
        <script><![CDATA[var BacklogAnalytics = Class.create();
BacklogAnalytics.prototype = {

	initialize: function(record) {
		if(record) {
			try { this.ex = this._getRecord(record,this.pfx+'execution'); } catch(e) {}
			//get definition either from execution or from provided record
			if(this.ex) this.def = this._getRecord(this.ex.getValue('definition'),this.pfx+'definition');
			else this.def = this._getRecord(record,this.pfx+'definition');
		}
	},

	pfx : 'x_417679_bl_analtx_',
	
	/*
	Create a report from an execution
	@param update : (boolean) if true, updates the execution record. Otherwise do nothing
	@return (string) sys_id of report record
	*/
	createReport : function(update) {
		this._hasEx();
		var t = new BLReportTemplate();

		var r = new GlideRecord(this.pfx+'report');
			r.initialize();
			r.title = this.ex.name;
			r.sys_name = this.ex.name;
			r.report_source = this.ex.sys_id;
			r.field_list = t.getFieldList();
		for(var field in t.template) r[field] = t.template[field];
		var sys = r.insert();
		
		if(update) {
			this.ex.sys_report = sys;
			this.ex.update();
			this._update();
		}
		return sys;
	},

	/*
	Updates/creates the auto-execution record listed on definition with new filter
	@param update : (boolean) if true, updates the definition record. Otherwise do nothing
	@return (string) sys_id of new/updated special auto report execution
	*/
	updateAutoReportExecution : function(update) {
		this._hasDef();
		var ex = new GlideRecord(this.pfx+'execution');
		var f = ex.get(this.def.auto_execution);
		if(!f) ex.initialize();
			ex.definition = this.def.sys_id;
			ex.filter = "execution="+this.updateDefLatestExecution();
			ex.auto_report = true;
			ex.state = '-1';
		var r = f ? ex.update() : ex.insert();
		if(update) {
			this.def.auto_execution = r;
			this.def.update();
			this._update();
		}
		return this._log((f?'Existing auto report execution updated ':'New auto report execution created ')+r+' for definition '+this.def.sys_id,r);
	},

	/*
	Update definition with the latest execution record
	@return (string) sys_id of latest execution record
	*/
	updateDefLatestExecution : function() {
		this._hasDef();
		var gr = new GlideRecord(this.pfx+'execution');
		gr.addQuery('definition='+this.def.sys_id);
		gr.orderByDesc('sys_created_on');
		gr.query();
		if(gr.next()) this.def.latest_execution = gr.sys_id;
		else this.def.latest_execution = '';
		this.def.update();

		if(!this.def.latest_execution.nil()) this._log('Definition '+this.def.sys_id+' has been updatd with latest execution '+gr.sys_id);
		else this._log('Definition '+this.def.sys_id+' has no latest execution.');

		this._update();
		return this.def.getValue('latest_execution');
	},

	/*
	Execute a definition now. Creates an execution record in queued state, ready for generating data
	@param manual : (boolean) if true, add manual descripion to execution. else false/null do nothing
	@return (string) new execution record sys_id
	*/
	executeNow : function(manual) {
		try {
			this._hasDef();
			this.canExecute();
			this.ex = new GlideRecord(this.pfx+'execution');
			this.ex.initialize();
			this.ex.definition = this.def.sys_id;
			this.ex.state = '1';
			if(manual) this.ex.description = "Manually executed by "+gs.getUserDisplayName();

			var sys = this.ex.insert();
			this._update();
			return this._log('New execution created for definition '+this.def.sys_id, sys);
		} catch(e) {
			gs.addErrorMessage('An error occured creating a new execution for this definition.');
			throw this._err('[executeNow] Error thrown. '+e.message, {'manual':manual});
		}
	},

	/*
	Generate data for an execution record
	@return (object) stats collected
	*/
	generateExecutionData : function() {
		try {
			this._hasEx();
			this._hasDef();
			var tds = this.getExecutionTrends(), now = new GlideDateTime().getNumericValue(), 
				stats = {}, endData = [];
			//check!
			this.canExecute();
			this.validateExecution();
			
			this.setState('2'); //is executing

			//Generate statistics
			var rec = new GlideRecord(this.def.table);
				rec.addQuery(this.def.condition);
				rec.query();
			while(rec.next()) {
				if(rec.sys_id==null) continue;
				var trend_by = new GlideDateTime(rec.getValue(this.def.trend_by)).getNumericValue(),
					group_by = rec.getValue(this.def.group_by),
					decision = this._decideRange(now - trend_by, tds); //get sys of trend range this record should belong to
				if(group_by=='') group_by = '/none/';
				if(decision=='discard') continue;
				if(stats[group_by]==null)
					stats[group_by] = { //create initial stat data and trends template
						field_value : group_by,
						display_value : rec[this.def.group_by].getDisplayValue(),
						table_value : this.getGroupByRefTable(rec.getElement(this.def.group_by)),
						trends : this._copyObj(tds.trends)
					};
				//push stat trend data
				stats[group_by].trends[decision].count++;
				stats[group_by].trends[decision].records.push(rec.getValue('sys_id'));
			}

			//Create data records
			for(var a in stats)
				for(var i=0;i<tds.order.length;i++) endData.push(this._insertData(stats[a],tds.order[i],rec));
			
			this.setState('3',true); //is finished and locked

			return this._log('Generated '+endData.length+' data records for execution '+this.def.getValue('sys_id')+': '+endData.toString(),stats);
			/*END*/
		} catch(e) {
			throw this._err('[generateExecutionData] Error thrown. '+e.message+'\nStack:'+e.stack,
							{'record':rec, 'trend_by':trend_by, 'group_by':group_by,'decision':decision,'stats':stats, 'stats@groupby':stats[group_by], 'endData':endData});
		}
	},
	/*private use only! No validation checks in this function*/
	_insertData : function(stat,trend_sys, rec) {
		var dr = new GlideRecord(this.pfx+'data');
		dr.initialize();
		dr.count = stat.trends[trend_sys].count;
		dr.execution = this.ex.sys_id;
		dr.trend = trend_sys;
		dr.field_value = stat.field_value;
		dr.display_value = stat.display_value;
		if(stat.table_value!='') {
			dr.record_value = stat.field_value;
			dr.table_value = stat.table_value;
		}
		var d_sys = dr.insert();

		//if task is base table, create relationship between trend stat and task
		if(new global.TableUtils(rec.getTableName()).getAbsoluteBase()=='task' && d_sys)
			for(var i=0;i<stat.trends[trend_sys].records.length;i++) {
				var rel = new GlideRecord(this.pfx+'m2m_data_tasks');
				rel.initialize();
				rel.bl_analtx_data = d_sys;
				rel.task = stat.trends[trend_sys].records[i];
				rel.insert();
			}

		return d_sys;
	},
	
	/*
	Generates a CSV string of all execution data in correct spreadsheet format - will create file if attachment=true
	@param attachment : if true, add CSV attachment to execution record, else false/null do nothing
	@return (string) CSV printout
	*/
	generateCSV : function(attachment) {
		try {
			this._hasEx();
			var tds = this.getExecutionTrends(),
				data = this.fetchExecutionData(), s = '"', sn = ',"';
		
			var csvOut = '"Display Value","Field Value"';
			for(var i=0;i<tds.order.length;i++) csvOut += sn+tds.trends[tds.order[i]].label+s; //Create header from trend labels
			for(var field_value in data) {
				csvOut += '\r\n' + s+data[field_value].display_value+s + sn+field_value+s;
				for(i=0;i<tds.order.length;i++) csvOut += sn+data[field_value][tds.trends[tds.order[i]].label]+s;
			}
			
			if(attachment) { //create attachment if asked for
				var att = new GlideSysAttachment();
				att.write(this.ex, this.ex.name, 'application/csv', csvOut);
			}
			
			return this._log('CSV data generated for execution '+this.ex.number+(attachment?' and was attached to the record.':'.'),csvOut);
		} catch(e) {
			gs.addErrorMessage('An error occured generating the CSV.');
			throw this._err('[generateCSV] Error thrown. '+e.message, {'attachment':attachment});
		}
	},

	/*
	Check if execution record can run - should be unlocked with no data
	@return (boolean) true if no data, otherwise throws error
	*/
	validateExecution : function() {
		this._hasEx(); //ex record is required
		if(this.ex.locked) throw this._err('Execution '+this.ex.number+' is locked.');
		
		var gr = new GlideAggregate(this.pfx+'data');
		gr.addQuery('execution='+this.ex.sys_id);
		gr.query();
		if(!gr.hasNext()) return true;
		else {
			this.ex.locked = true;
			this.ex.update();
			this._update();
			throw this._err('Execution '+this.ex.number+' already has data.');
		}
	},
	
	/*
	Check if a definition is valid and can create executions
	@return (boolean) true if correct otherwise throws error object
	*/
	canExecute : function() {
		this._hasDef();
		var msg = '';
		if(this.def.table.nil()) msg = '\nDefinition does not have a defined table.';
		if(this.def.group_by.nil()) msg = '\nDefinition must have a specified \'Group By\' field.';
		if(this.def.trend_by.nil()) msg = '\nDefinition must have a specified \'Trend By\' field.';
		
		var gr = new GlideRecord(this.pfx+'definition_trend');
		gr.addQuery('definition='+this.def.sys_id);
		gr.query();
		if(!gr.hasNext()) msg = '\nDefinition must have defined \'Trend Ranges\'.';
		
		if(msg!='') throw this._err(msg,{'table':this.def.table, 'group_by':this.def.group_by, 'trend_by':this.def.trend_by, 'has trend ranges':gr.hasNext()});
		else return true;
	},

	/*
	Provides reference field table name
	@param e : (GlideElement) of GlideRecord
	@return (string) table name OR empty
	*/	
	getGroupByRefTable : function(e) {
		try {
			if(e==null) return '';
			var type = e.getED().getInternalType();
			if(type=='reference' || type=='document_field')
				return e.getReferenceTable();
			else return '';
		} catch(e) {
			return '';
		}
	},

	/*
	Check if an execution record has associated data or not
	@return (boolean) has data records associated with execution
	*/
	hasExecutionData : function() {
		this._hasEx();
		var gr = new GlideRecord(this.pfx+'data');
			gr.addQuery('execution='+this.ex.getValue('sys_id'));
			gr.setLimit(1);
			gr.query();
		return gr.hasNext();
	},
	
	/*
	Sum all execution data counts
	@param extraCondition : (string) add extra condition to data record query
	@return (integer) sum of count field. If none, throw error.
	*/
	sumExecutionData : function(extraCondition) {
		this._hasEx();
		var ga = new GlideAggregate(this.pfx+'data');
			ga.addQuery('execution='+this.ex.sys_id+(extraCondition?'^'+extraCondition:''));
			ga.addAggregate('SUM', 'count');
			ga.query();
		if(ga.next()) return ga.getAggregate('SUM', 'count');
		else throw this._err('Unable to get sum of execution data for '+this.ex.number,
								{'extraCondition':extraCondition, 'execution_sys_id':this.ex.sys_id});
	},
	
	/*
	Get all execution data as an object
	@param order : (integer) if 0/null order by field value, else by trend label
	@return (object) results.   order=0/null = { field_value1:{display_value:<display_value>, trend_label1:<count>, trend_label2:<count>} }
								order!= 0/null = { trend_label1:{field_value1:{count:<count>, display_name:<display_name>}}, trend_label2:.... }
	*/
	fetchExecutionData : function(order) {
		this._hasEx();
		var result = {};
		
		var gr = new GlideRecord(this.pfx+'data');
			gr.addQuery('execution='+this.ex.getValue('sys_id'));
			gr.query();
			if(!gr.hasNext()) throw this._err('Execution has no data.',
												{'execution_sys_id':this.ex.sys_id,'execution_number':this.ex.number, 'order':order});
		while(gr.next()) {
			if(gr.trend.nil()) throw this._err('Execution data has no trend', {'data_sys_id':gr.sys_id});
			var trend_label = gr.trend.label, field_value = gr.field_value;
			if(field_value=='') field_value = '(empty)';

			if(order==0||order==null) {
				if(result[field_value]==null) result[field_value] = {};
				if(result[field_value].display_value==null) 
					result[field_value].display_value = gr.getValue('display_value');
				result[field_value][trend_label] = gr.getValue('count');
			} else {
				if(result[trend_label]==null) result[trend_label] = {};
				if(result[trend_label][field_value].display_value==null) 
					result[trend_label][field_value].display_value = gr.getValue('display_value');
				result[trend_label][field_value].count = gr.getValue('count');
			}
		}
		return result;
	},

	setState : function(state, lock) {
		this._hasEx();
		this.ex.state = state.toString();
		if(lock) this.ex.locked = true;
		this.ex.update();
		this._update();
	},

	/*
	Get execution trends in an object
	@return object of order of trends and objects of trends data
	*/
	getExecutionTrends : function() {
		this._hasEx();
		return this._getTrends(this.ex);
	},

	/*
	Get definition trends in an object
	@return object of order of trends and objects of trends data
	*/
	getDefinitionTrends : function() {
		this._hasDef();
		return this._getTrends(this.def);
	},

	_getTrends : function(record,t) {
		var r = this._getRecord(record,t),
			table = r.getTableName().replace(this.pfx,''),
			result = {order:[], trends:{}}, c = 0;
		if(table!='execution' && table!='definition')
			throw this._err('[getTrendsTemplate] Unacceptable table name.',{'table':table, 'record_sys_id':r.getValue('sys_id')});

		var gr = new GlideRecord(this.pfx+table+'_trend');
			gr.addQuery(table+'='+r.getValue('sys_id'));
			gr.orderBy('upper_limit_dur');
			gr.query();
			if(!gr.hasNext()) {
				if(table=='definition') 
					throw this._err('Definition does not have any trends.',{'table':table, 'record_sys_id':r.getValue('sys_id')});
				else if(table=='execution') {
					this._genExTrends();
					return this._getTrends(r);
				} else throw this._err('[getTrendsTemplate] Unknown error occured.',{'table':table, 'record_sys_id':r.getValue('sys_id')});
			}

		while(gr.next()) {
			var sys = gr.getValue('sys_id');
			result.order[c] = sys;
			result.trends[sys] = {
				sys_id : sys,
				label : gr.getValue('label'),
				count : 0,
				upper_limit_dur : new GlideDateTime(gr.getValue('upper_limit_dur')).getNumericValue(),
				order : c,
				records : [],
			};
			result.trends[sys][table] = r.sys_id;
		c++;
		}
		return this._log('Fetched '+c+' trends for '+table+' '+r.sys_id, result);
	},

	_genExTrends : function(definitionTrends) {
		this._hasEx();
		t = definitionTrends, newTs = [];
		if(t==null || typeof t!='object') t = this._getTrends(this.def);

		//clean first
		var gr = new GlideRecord(this.pfx+'execution_trend');
		gr.addQuery('execution='+this.ex.sys_id);
		gr.query();
		while(gr.next()) gr.deleteRecord();

		//create new ones
		for(var trend in t.trends) {
			gr = new GlideRecord(this.pfx+'execution_trend');
			gr.initialize();
			gr.label = t.trends[trend].label;
			gr.upper_limit_dur.setDateNumericValue(t.trends[trend].upper_limit_dur);
			gr.display_label = '['+t.trends[trend].order+'] ' + gr.label;
			gr.execution = this.ex.sys_id;
			newTs.push(gr.insert());
		}
		this._update();
		return newTs;
	},

	/*
	Get sys_id of trend range that a value should belong to
	@param v : (number) value to test
	@param tds : (object) Trends object produced by this._getTrends()
	*/
	_decideRange : function(v, tds) {
		for(var i=0;i<tds.order.length;i++)
			if(v<=tds.trends[tds.order[i]].upper_limit_dur) return tds.order[i];
			
		var ts = '', c=0;
		for(var t in tds.trends) ts+= '['+(c++)+']'+tds.trends[t].upper_limit_dur+', ';
		return this._log('Could not make decision for value '+v+' in limits= '+ts,'discard');
	},

	_hasEx : function() {
		if(this.ex==null) throw this._err('no execution has been defined.');
		else if(!this.def.isValidRecord()) throw this._err('Execution record given is not a valid record.');
		else return true;
	},

	_hasDef : function() {
		if(this.def==null) throw this._err('no definition has been defined.');
		else if(!this.def.isValidRecord()) throw this._err('Definition record given is not a valid record.');
		else return true;
	},

	_update : function() {
		if(this.ex) this.initialize(this.ex.getValue('sys_id'),this.pfx+'execution');
		else if(this.def) this.initialize(this.def.getValue('sys_id'),this.pfx+'definition');
	},

	/*
	Allows methods to accept either string sys_id or GlideRecord of record. Checks GlideRecord class matches table parameter
	@param record : string or GlideRecord of record
	@param table : table/class name
	@return verified GlideRecord object of record
	*/
	_getRecord : function(record, table) {
		var r = record;
		if(typeof r=="string") {
			if(table==null || table=='') throw this._err('Unable to fetch record '+record+' because table parameter was not specified.');
			r = new GlideRecord(table);
			if(!r.get(record)) throw this._err('Unable to get record '+record+' on table '+table);
		}

		try {
			if(table!=null && (r.getTableName()!=table)) throw this._err('GlideRecord is of wrong class.');
			if(!r.isValidRecord()) throw this._err('GlideRecord record is not valid.');
		} catch(e) {
			throw this._err('Record parameter is unacceptable data type. Could not verify validity of object. '+e.message,
				{'parm_table':table, 'record':r});
		}
		
		if(r!=record) this._log('[getRecord] Fetched "'+r.getDisplayValue()+'" ('+r.sys_id+') from "'+r.getClassDisplayValue()+'" ('+r.getTableName()+')');
		return r;
	},

	_copyObj : function(obj) {
		return JSON.parse(JSON.stringify(obj));
	},

	_err : function(msg,metadata) {
		var e = new Error(msg);
		gs.warn(msg);
		if(metadata) e.metadata = metadata;
		e.getMetadata = function(json) { //extra function for error object!
			if(this.metadata==null) return '';
			var s = '';
			if(json) return JSON.stringify(this.metadata);
			for(f in this.metadata) s += f+'='+this.metadata[f]+'\n';
			return s;
		};
		return e;
	},

	_log : function(msg, passthru) {
		gs.info(msg);
		return passthru;
	},
	
	type: 'BacklogAnalytics'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>Aidan.Lovegrove</sys_created_by>
        <sys_created_on>2020-05-29 17:57:20</sys_created_on>
        <sys_id>97bc260a07411010d318fd1e7c1ed0c3</sys_id>
        <sys_mod_count>97</sys_mod_count>
        <sys_name>BacklogAnalytics</sys_name>
        <sys_package display_value="Backlog Analytics" source="x_417679_bl_analtx">97d1624a07011010d318fd1e7c1ed0a1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Backlog Analytics">97d1624a07011010d318fd1e7c1ed0a1</sys_scope>
        <sys_update_name>sys_script_include_97bc260a07411010d318fd1e7c1ed0c3</sys_update_name>
        <sys_updated_by>Aidan.Lovegrove</sys_updated_by>
        <sys_updated_on>2020-06-03 22:20:53</sys_updated_on>
    </sys_script_include>
</record_update>
